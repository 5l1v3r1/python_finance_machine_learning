Modern portfolio thery (MPT) efficient frontiers

Joining data
stocks = ['AMD', 'CHK', 'QQQ'] 
full_df = pd.concat([amd_df, chk_df, qqq_df]), axis=1).dropna() 
full_df.head() 

Calculating daily returns of stocks 
returns_daily = full_df.pct_change() 

resample monthly timeframe
monthly_df = full_df.resample('BMS').first() 

calculate monthly returns 
returns_monthly = monthly_df.pct_change().dropna() 

print(returns_monthly.tail()) 

Covariances 
covariances = {}
for i in returns_monthly_index:
 rtd_idx = returns_daily.index
 # mask daily returns for each month and year and calculate covariance 
 mask = (rtd_idx.month == i.month) & (rtd_idx.year == i.year) 
 covariances[i] = returns_daily[mask].cov() 

print(covariances[i]) 

Generating portfolio weights 
for date in covariances.keys():
 cov = covariances[date] 
 for single_portfolio in range(5000):
  weights = np.random.random(3) 
  weights /= np.sum(weights) 

portfolio_returns, portfolio_volatilty, portfolio_weights = {}, {}, {}

for date in covariances.keys():
 cov = covariances[date] 
 for single_portfolio in range(5000):
  weights = np.random.random(3) 
  weights /= np.sum(weights) 

  returns = np.dot(weights, returns_monthly.loc[date]) 
  volatility = np.sqrt(np.dot(weights.T, np.dot(cov, weights)))

  portfolio_returns.setdefault(date, []).append(returns) 
  portfolio_volatility.setdefault(date, []).append(volatility) 
  portfolio_weights.setdefault(date, []).append(weights) 

date = sorted(covariances.keys())[-1]

plt.scatter(x=portfolio_volatility[date], 
            y=portfolio_returns[date], 
            alpha=0.5) 
plt.xlabel('Volatiliity') 
plt.ylabel('Returns') 
plt.show() 


Sharpe ratio = portfolio return - risk free return
              --------------------------------------
              portfolio standard deviation


Getting our Sharpe ratios
 
sharpe_ratio, max_sharpe_idxs = {}, {} 

for date in portfolio_returns.keys(): 
 for i, ret in enumerate(portfolio_returns[data]): 
  volatility = portfolio_volatility[date][i]
  sharpe_tatio.setdefault(date, []).append(ret / volatility) 

 max_sharpe_idxs[date] = np.argmax(sharpe_ratio[date]) 

Create features 
#calculate exponentialy moving average
ewma_daily = returns_daily.ewm(span=30).mean() 

#resample daily returns
ewma_montly = ewma_daily.resample('BMS').first() 

#shift ewma one months
ewma_monthly = ewma_monthly.shift(1).dropna() 

Calculate features and targets
targets, features = [], []

#create features from price history 
for date, ewma in ewma_monthly.iterrows(): 
 #get the index of the best ratio
 best_idx = max_sharpe_idxs[date]
 targets.append(portfolio_weights[date][best_idx]) 
 features.append(ewma) 

targets = np.array(targets) 
features = np.array(features) 

Re-plot efficient frontier 
date = sorted(covariances.keys())[-1] 

cur_returns = portfolio_returns[date] 
cur_volatility = portfolio_volatility[date] 

plt.scatter(x=cur_volatility, 
            y=cur_returs, 
            alpha=0.1, 
            color='blue') 
best_idx = max_sharpe_idxs[date] 

plt.scatter(cur_volatility[best_idx], 
            cur_returns[best_idx], 
            marker='x',
            color='orange') 
 
plt.xlabel('Volatility') 
plt.ylabel('Returns') 
plt.show() 


Machine Learning for MPT
 
Make train and test sets
train_size = int(0.8 * features.sharpe[0]) 
train_features = features[:train_size] 
train_targets = targets[:train_size] 

test_features = features[train_size:] 
test_targets = targets[train_size:] 

print(features.sharpe) 

Fit the model 
from sklearn.ensemble import RandomForestRegressor 

rfr = RandomForestRegressor(n_estimators=300, random_state=42) 
rfr.fit(train_features, train_targets) 

print(rfr.score(train_features, train_targets)) 
print(rfr.score(test_features, test_targets)) 


Evaluate the model's performance 
test_predictions = rfr.predict(test_features) 

test_returns = np.sum(returns_monthly.iloc[train_size:] * test_predictions, axis=1) 

plt.plot(test_returns, label='algo') 
plt.plot(returns_monthly['QQQ'].iloc['train_size':], label='QQQ') 
plt.legend() 
plt.show() 


Calculate hypothetical portfolio 
cash = 1000 
algo_cash = [cash] 

for r in test_returns: 
 cash *= 1 + r 
 algo_cash.append(cash) 

#calculate prefomance for QQQ
cash = 1000 
qqq_cash = [cash] 

for r in returns_monthly['QQQ'].iloc[train_size:]: 
 cash *= 1 + r 
 qqq_cash.append(cash) 

print('algo returns:', (algo_cash[-1] - algo_cash[0] / algo_cash[0]) 
print('QQQ returns:', (qqq_cash[-1] - qqq_cash[0] / qqq_cash[0]) 

Plot the results

plt.plot(algo_cash, label='algo') 
plt.plot(qqq_cash, label='QQQ') 
plt.ylabel('$') 
plt.legend() 
plt.show() 





