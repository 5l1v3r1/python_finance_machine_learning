Scaling data and KNN Regression 

Feature selection: remove weekdays 

print(feature_names) 
print(feature_names[: -4]) 

 
train_features = train_features.iloc[:, :-4] 
test_features = test_features.iloc[:, :-4] 

Scaling options 

min-max
standardization
median-MAD
map to arbitrary function (e.g sigmoid, tanh) 


sklearn's scaler
from sklearn.preprocessing import scaler 

sc = scaler() 
scaled_train_features = sc.fit_transform(train_features)  
scaled_test_features = sc.transform(test_features) 

Making subplots
f, ax = plt.subplots(nrows=2, ncols=1) 

train_features.iloc[:, 2].hist(ax=ax[0]) 
ax[1].hist(scaled_train_features[:, 2]) i
plt.show()


Neural Networks

Neural nets have: 
non-linearity 
variable interactions
customizability 

Keras Library
Implementing a neural net with keras 

from keras.models import Sequential 
from keras.layers import Dense

model = Sequential() 
model.add(Dense(50, 
                input_dim=scaled_train_features.shape[1], 
                activation='relu')) 
model.add(Dense(10, activation='relu')) 
model.add(Dense(1, activation='linear')) 

Fitting the model 
model.compile(optimizer='adam', loss='mse') 
history = model.fit(scaled_train_features, train_targets, epochs=50) 

Examining the loss 
plt.plot(history.history['loss']) 
plt.title('loss:' + str(round(history.history['loss'][-1], 6))) 
plt.xlabel('epoch') 
plt.ylabel('loss') 
plt.show()

Checking out perfomance 

from sklearn.metrics import r2_score 

train_preds = model.predict(scaled_train_features) 
print(r2_score(train_targets, train_preds)) 

Plot perfomance
plt.scatter(train_preds, train_targets) 
plt.xlabel('predictions') 
plt.ylabel('actual') 
plt.show() 

Custom loss functions

Implementing custom loss function   

import tensorflow as tf 
import keras.losses

def mean_squared_error(y_true, y_pred): 
 loss = tf.square(y_true - y_pred) 
 return tf.reduce_mean(loss, axis=-1) 


keras.losses.mean_squared_error = mean_squared_error
model.compile(optimizer='adam', loss=mean_squared_error) 
history = model.fit(scaled_train_features, train_targets, epochs=50) 

tf.less(y_true * y_pred, 0) 

def sign_penalty(y_true, y_pred): 
 penalty = 10.
 loss = tf.where(tf.less(y_true * y_pred, 0), penalty * tf.square(y_true - y_pred), tf.square(y_true - y_pred)) 
 
 return tf.reduce_mean(loss, axis=-1) 
 
keras.losses.sign_penalty = sign_penalty

model = Sequential() 
model.add(Dense(50, 
                input_dim=scaled_train_features.shape[1], 
                activation='relu')) 

model.add(Dense(10, activation='relu')) 
model.add(Dense(1, activation='linear')) 

model.compile(optimizer='adam', loss=sign_penalty) 
history = model.fit(scaled_train_features, train_targets, epochs=50) 

train_preds = model.predict(scaled_train_features) 

plt.scatter(train_preds, train_targets) 
plt.xlabel('predictions') 
plt.ylabel('actual') 
plt.show() 


